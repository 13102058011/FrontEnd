1.JavaScript简介
	1.JS组成
		1.ECMAScript
		2.BOM	整个浏览器
		3.DOM	document	整个文档，从<html>到</html>

	2.简单语法
		alert("hello world");      //在页面上弹出警告框，分号可以不加，建议加上
		document.write("hello world"); //在当前页面上输出
		
	3.注意事项
		1. JavaScript和HTML代码写在同一个文件中，执行顺序自上而下
		2. 一般JavaScript代码写在head标签内，也可以写在任何地方
		3. JavaScript可以多次出现，顺序执行
		4. js代码可以从外部引入
			1. 创建一个js文件
			2. <script type="text/javascript" src="demo.js">***</script>
			3. ***处代码无法执行，只能进行引入
			4. type="text/javascript"可以省略不写
			
		5.document.write("</script>");
			无法输出</script>
			使用&lt和&gt分别代表左右尖括号
			
	4.注释
		1.单行注释：//     快捷键：ctrl + /
		2.多行注释：/**/	快捷键：ctrl + shift + /
-------------------------------------------------------------------------------	
2.常量变量
	1.数据类型
		1.基本数据类型
			<1>数字		   number		   100,3.14
			<2>字符串		string		    所有带双引号/单引号	"hello",'hello'
			<3>布尔值		boolean			true,false
			<4>特殊数据类型	   null undefined	  null空,undefined未申明
		2.复合数据类型

	2.声明变量
		1. 通过关键字var来声明变量
            var age = 18;
            var name = "xxx",age = 20,sex = "男";
        2. 可以同时复制多个变量
            var web = a = b = "hello";
            console.log(a,web,b);

	3.标识符
		1.以字母或下划线开头，不要使用$符号
		2.严格区分大小写
		3.标识符必须见名思意
		
	4.typeof
		使用typeof可以看到变量名的类型
		var age = 18;
		alert(typeof age);//Number
		
	5.js是弱语言，赋值什么类型就是什么类型
		但不要在后续的代码改变改变量的类型
	
---------------------------------------------------------------------------------------------------
3.自动类型转换
	1.任何类型的数据和字符串进行相加操作时都是拼接成了字符串
		
	2.任何数据和字符串做除加法以外的运算时
		1.与NaN做算数运算时始终都是NaN
		2.字符串如果是纯数字字符串则在运算过程中转成字符串，否则转换成NaN
		
		var tmp = 1-"2";//-1
		alert(tmp);
		var temp = 1-"2a";//NaN
		alert(temp);

---------------------------------------------------------------------------------------------------
4.变量提升
    function hd() {
        if (false) {
            var web = "hello";
        }
        console.log(web);
    }
    var web = "hello";会被拆成 var web;和web = "hello";
    并把var web；提升到程序前面，所以web是undefined

    所以建议var声明变量在程序前面声明
    使用let定义变量就不会出现问题

    function run(a = b, b = 3){}
    run();
    报错，因为b没有声明

---------------------------------------------------------------------------------------------------
5.全局污染
    1.
        function show(){
            web = "houdunren.com";         
        }   
        show();
        console.log(web);
        不加var，let，const是全局变量，会改变全局变量的值
        使用'use strict'严格模式，会解决影响

    2.
        var i = 99;
        for (var i = 0; i < 5; i++) {
            console.log(i);
        }
        console.log(i);
        i的值会方式改变，使用let替代var会解决影响

    3.const常量声明
        1. let和const都有块作用域的作用
        2. const定义常量，变量名通常使用大写

    4.window全局对象污染与重复声明
        1.代码示例
            var web = "hdcms";
            console.log(window.web);
        
        2.代码解析
            1. var声明的变量会存于window对象中，作为window的属性
            2. 使用let声明的变量就不会存于window对象
            
    5.重复声明
        1.代码示例
            var a = 1;
            var a = 2;

        2.代码解析
            1. 使用var重复声明变量没有报错
            2. 使用let和const会报错


---------------------------------------------------------------------------------------------------
6.变量冻结Object.freeze();
    1.代码示例
        "use strict"
        const HOST = {
            url: "www.baidu.com",
            port: 8080
        };
        Object.freeze(HOST);
        HOST.port = 80;
    
    2.代码解析
        1. Object.freeze(HOST); 冻结对象的变量，对象中的变量值不可更改
        2. "use strict"     在严格模式下，修改变量值会报错

---------------------------------------------------------------------------------------------------
7.传值和传址
    1.代码示例
        let a = 1;
        let b = a;
        let e = {};
        let f = e; 

    2.代码解析
        1. a与b是传值
        2. e与f是传址

---------------------------------------------------------------------------------------------------
8.javascript细节知识
    1.null和undefined
        1. 引用类型初始为 null
        2. 基本类型初始为 undefined
        3. 没有返回值的函数返回 undefined

    2.严格模式
        1. 变量必须声明才可以使用
        2. 严格模式在当前作用域受影响
        3. 不可以使用关键字作为变量名

    3.等于判断
        1.代码示例
            let a = 1;
            let b = "1";
            console.log(a == b);    //true
            console.log(a === b);   //false

        2.代码解析
            1. == 会自动进行转型
            2. === 不会进行转型

    4.短路特性
        1.代码示例 
            let a = 6;
            let b = 0;
            let c = a || b;
            let sex = prompt("请输入性别")||"保密";

        2.代码解析
            1. ||运算符会短路
            2. 会返回真的值
            3. prompt("");弹窗输入

    5.window.open('https://baidu.com','hdcms');
        打开一个新窗口，网站为https://baidu.com，标记为hdcms

---------------------------------------------------------------------------------------------------
9.循环
    1.标签循环
        1.说明
            标签(label) 为程序定义位置，可以使用continue/break跳到该位置。

        2.代码示例
            houdunren: for (let i = 1; i <= 10; i++) {
                hdcms: for (let n = 1; n <= 10; n++) {
                    if (n % 2 != 0) 
                        continue hdcms;                
                    console.log(i, n);
                    if (i + n > 15) 
                        break houdunren;                
                }
            }

    2.for/in
        1.说明
            用于遍历对象的所有属性，for/in主要用于遍历对象，不建议用来遍历数组

        2.代码示例
            let info = {
                name: "后盾人",
                url: "houdunren.com"
            };
            for (const key in info) {
                if (info.hasOwnProperty(key)) {
                    console.log(info[key]);
                }
            }

    3.for/of
        1.说明
            用来遍历 Arrays（数组）, Strings（字符串）, Maps（映射）, Sets（集合）等可迭代的数据结构。
            与 for/in 不同的是 for/of 每次循环取其中的值而不是索引。

        2.代码示例
            let arr = [1, 2, 3];
            for (const iterator of arr) {
                console.log(iterator);
            }

---------------------------------------------------------------------------------------------------
10.类型检测
    1.typeof
        1.说明
            可以使用typeof用于判断数据的类型

        2.typeof 用于返回以下原始类型
            1. 基本类型：number/string/boolean
            2. function             函数名
            3. object              对象名/数组名
            4. undefined            -未赋值或者未声明

    2.instanceof
        instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。
        也可以理解为是否为某个对象的实例，typeof不能区分数组，但instanceof则可以。instanceof
        instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。
        也可以理解为是否为某个对象的实例，typeof不能区分数组，但instanceof则可以。

---------------------------------------------------------------------------------------------------
11.字符串
    1.声明定义
        1.使用对象形式创建字符串
            let hd = new String('houdunren');
            // 获取字符串长度
            console.log(hd.length);
            // 获取字符串
            console.log(hd.toString());

        2.简写方式       
            let content = '后盾人';
            console.log(content);

    2.转义符号
        1.说明
            有些字符有双层含义，需要使用 \ 转义符号进行含义转换。
            下例中引号为字符串边界符，如果输出引号时需要使用转义符号。

        2.常用转义符号列表
            \t	    制表符
            \n	    换行
            \\	    斜杠符号
            \'	    单引号
            \"	    双引号R

    3.连接运算符
        1.代码示例
            let year = 2010,
            name = '后盾人';
            console.log(name + '成立于' + year + '年');   
            let web = '后盾人';
            web += '网址：houdunren.com';
            console.log(web); //后盾人网址：houdunren.com
        
        2.代码解析
            1. 使用 + 可以连接多个内容组合成字符串，经常用于组合输出内容使用
            2. 使用 += 在字符串上追回字符内容

    4.模板字面量
        1.说明
            1. 使用 `...` 符号包裹的字符串中可以写入引入变量与表达式
            2. 支持换行操作不会产生错误

        2.代码示例
            let url = 'houdunren.com';
            document.write(`后盾人网址是${url}
            大家可以在网站上学习到很多技术知识`);

    5.模板字面量支持嵌套使用
        2.代码示例
            let lessons = [
                {title: '媒体查询响应式布局'},{title: 'FLEX 弹性盒模型'},{title: 'GRID 栅格系统'}
            ];

            function template() {
            return `<ul>
                ${lessons.map((item)=>`
                    <li>${item.title}</li>
                `).join('')}
            </ul>`;
            }
            document.body.innerHTML = template();

    6.标签模板
        1.代码示例
            let lesson = 'css';
            let web = '后盾人';
            tag `访问${web}学习${lesson}前端知识`;

            function tag(strings, ...values) {
                console.log(strings); //["访问", "学习", "前端知识"]
                console.log(values); // ["后盾人", "css"]
            }      

        2.代码解析
            1. 标签模板是提取出普通字符串与变量，交由标签函数处理   
            2. tag是标签，对应标签函数   

    7.字符串常用函数 (name = "houdunren")
        1.获取字符串长度
            1. name.length

        2.大小写转换
            1. name.toUpperCase();     全部转换成大写
            2. name.toLowerCase();     全部转换成小写
        
        3.移除空白
            1. name.trim();        -去除空白
            2. name.trimLeft();      -删除左边空白
            3. name.trimRight();      删除右边空白
        
        4.获取单字符
            1. name.charAt(3);       根据从0开始的位置获取字符
            2. name[3];          -使用数字索引获取字符串 

        5.截取字符串
            1. slice()
                1.name.slice(1)     从指定索引位置开始截取(oudunren)
                2.name.slice(-3)    -负数代表倒序(ren)
                3.name.slice(1,3)    指定索引的截取(ou)
                4.name.slice(-3,-1)   指定索引的倒序(re)

            2. substr()
                1.name.substr(1)     从指定索引位置开始截取(oudunren)
                2.name.substr(-3)    -负数代表倒序(ren)
                3.name.substr(1,3)    从第一个索引处向后截取3个字符(oud)
                4.name.substr(-1,-3)   没有意义()
                5.name.substr(-3,2)   -截取2个字符(re)

            3.substring()
                1.name.substring(1)     从指定索引位置开始截取(oudunren)
                2.name.substring(-3)    -负数都会当作0来处理(houdunren)
                3.name.substring(1,3)    指定索引的截取(ou)
                4.name.substring(-3,-1)   没有意义()

        6.字符串检索
            1.indexOf() 从开始获取字符串位置，检测不到时返回 -1,第二个参数指查找开始位置
                1.name.indexOf("d")     
                2.name.indexOf("d",4)    

            2.includes() 字符串中是否包含指定的值，第二个参数指查找开始位置, 找到返回 true 反之为 false
                1.name.includes("d")    
                2.name.includes("d",4)   

            3.lastindexOf() 从右侧查找,同indexOf
                
            4.startsWith() 判断是否是指定位置开始，第二个参数为查找的开始位置
                1.name.startsWith('h')//true
                2.name.startsWith('o', 1)//true

            5.endsWith() 是否是指定位置结束，第二个参数为查找的结束位置。
                name.endsWith('com') //true
                name.endsWith('o', 2) //true

        7.替换字符串
            1. replace() 方法用于字符串的替换操作
            2. name.replace(name,"tonydon")
        
        8.重复生成
            function star(num = 3) {
                return '*'.repeat(num);
            }
            console.log(star());

        9.类型转换
            1.分隔字母
                let name = "hdcms";
                console.log(name.split(""));

            2.将字符串转换为数组
                console.log("1,2,3".split(",")); //[1,2,3]

            3.隐式类型转换会根据类型自动转换类型
                let hd = 99 + '';
                console.log(typeof hd); //string

            4.使用 String 构造函数可以显示转换字符串类型
                let hd = 99;
                console.log(typeof String(hd));

            5.js中大部分类型都是对象，可以使用类方法 toString转化为字符串
                let hd = 99;
                console.log(typeof hd.toString()); //string
                let arr = ['hdcms', '后盾人'];
                console.log(typeof arr.toString()); //string

---------------------------------------------------------------------------------------------------
9.案例
    1.代码示例
        <form action="https://www.houdunren.com" id="form">
            用户名：<input type="text" name="user">
            <hr>
            <input type="checkbox" name="copyright">接受协议
            <hr>
            <button>提交</button>
        </form>

        <script>
            "use strict"

            function query(el) {
                return document.querySelector(el);
            }

            query("#form").addEventListener("submit",
                function (event) {
                    let user = query("[name='user']").value.trim();
                    let copyright = query("[name = 'copyright'").checked;
                    console.log(copyright);
                    if (!user || copyright == false) {
                        event.preventDefault();
                        alert("!!");
                    }
                });
        </script>

    2.代码解析
        1. 
---------------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------------



